!function(n){function a(a){for(var s,p,c=a[0],l=a[1],u=a[2],i=0,d=[];i<c.length;i++)p=c[i],Object.prototype.hasOwnProperty.call(t,p)&&t[p]&&d.push(t[p][0]),t[p]=0;for(s in l)Object.prototype.hasOwnProperty.call(l,s)&&(n[s]=l[s]);for(r&&r(a);d.length;)d.shift()();return o.push.apply(o,u||[]),e()}function e(){for(var n,a=0;a<o.length;a++){for(var e=o[a],s=!0,c=1;c<e.length;c++){var l=e[c];0!==t[l]&&(s=!1)}s&&(o.splice(a--,1),n=p(p.s=e[0]))}return n}var s={},t={11:0,21:0},o=[];function p(a){if(s[a])return s[a].exports;var e=s[a]={i:a,l:!1,exports:{}};return n[a].call(e.exports,e,e.exports,p),e.l=!0,e.exports}p.m=n,p.c=s,p.d=function(n,a,e){p.o(n,a)||Object.defineProperty(n,a,{enumerable:!0,get:e})},p.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},p.t=function(n,a){if(1&a&&(n=p(n)),8&a)return n;if(4&a&&"object"==typeof n&&n&&n.__esModule)return n;var e=Object.create(null);if(p.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:n}),2&a&&"string"!=typeof n)for(var s in n)p.d(e,s,function(a){return n[a]}.bind(null,s));return e},p.n=function(n){var a=n&&n.__esModule?function(){return n.default}:function(){return n};return p.d(a,"a",a),a},p.o=function(n,a){return Object.prototype.hasOwnProperty.call(n,a)},p.p="/";var c=window.webpackJsonp=window.webpackJsonp||[],l=c.push.bind(c);c.push=a,c=c.slice();for(var u=0;u<c.length;u++)a(c[u]);var r=l;o.push([54,0]),e()}({17:function(n,a,e){"use strict";e.r(a),function(n){e.d(a,"default",(function(){return c}));var s,t,o,p=e(0);class c extends p.a{inited(){n.hub&&n.hub.fire&&n.hub.fire("changed",{level:0,children:[{level:2,title:"获取渲染内容",hash:"%E8%8E%B7%E5%8F%96%E6%B8%B2%E6%9F%93%E5%86%85%E5%AE%B9"},{level:2,title:"目录结构",hash:"%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84"},{level:2,title:"布局组件",hash:"%E5%B8%83%E5%B1%80%E7%BB%84%E4%BB%B6"}]})}}o={},(t="components")in(s=c)?Object.defineProperty(s,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):s[t]=o}.call(this,e(3))},42:function(n,a){n.exports=' <div class="content markdown-content"><div class="markdown"><h1 id="%E5%BC%80%E5%8F%91%E4%B8%BB%E9%A2%98">开发主题</h1> <p>想要书写一个主题，首先在你文档根目录创建一个 <code>.sdoc/theme</code> 目录，接着创建一个 <code>layout.san</code> 文件：</p> <pre class="language-text"><code class="language-text">.\n└─ .sdoc\n    └─ theme\n        └─ layout.san</code></pre> <p>到这里，就像开发一个普通的 San 应用一样。如何组织你的主题，这完全取决于你。</p> <h2 id="%E8%8E%B7%E5%8F%96%E6%B8%B2%E6%9F%93%E5%86%85%E5%AE%B9">获取渲染内容</h2> <p>当前的 <code>.md</code> 文件渲染的内容，可以通过组件的属性 <code>docit.content</code> 来使用，你可能想要它显示在页面中的某个地方。一个最简单的主题，可以是一个唯一的 <code>layout.san</code> 组件，并包含以下内容：</p> <pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>theme-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n        &#123;&#123;docit.content | raw}}\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n    dataTypes<span class="token operator">:</span> <span class="token punctuation">{</span>\n        docit<span class="token operator">:</span> DataTypes<span class="token punctuation">.</span>object\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre> <h2 id="%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84">目录结构</h2> <p>随着需求的变化，只有一个布局组件 <code>layout.san</code> 可能还不够，你可能想要定义更多的布局组件用于不同的页面。</p> <p>那么是时候重新组织你的主题了！一个约定的主题的目录结构如下：</p> <pre class="language-text"><code class="language-text">theme\n├── global-components\n│   └── xxx.san\n├── components\n│   └── xxx.san\n├── layouts\n│   ├── layout.san (必要的)\n│   └── 404.san\n├── styles\n│   ├── index.less\n│   └── palette.less\n├── templates\n│   ├── dev.ejs\n│   └── ssr.ejs\n├── index.js\n└── package.json</code></pre> <ul> <li><code>theme/global-components</code>: 该目录下的组件都会被自动注册为全局组件。</li> <li><code>theme/components</code>: San 组件。</li> <li><code>theme/layouts</code>: 布局组件，其中 <code>layout.san</code> 是必需的。</li> <li><code>theme/styles</code>: 全局的样式和调色板。</li> <li><code>theme/templates</code>: 修改默认的模板文件。</li> <li><code>theme/index.js</code>: 主题文件的入口文件。</li> </ul> <p>当你将你的主题以一个 npm 包的形式发布时，如果你没有任何主题配置，即没有 <code>theme/index.js</code>，那么你需要将 <code>package.json</code> 中的 <code>&quot;main&quot;</code> 字段设置为 <code>layouts/layout.san</code>，只有这样 SDoc 才能正确地解析主题。</p> <pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n    ...\n    <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"layouts/layout.san"</span><span class="token punctuation">,</span>\n    ...\n<span class="token punctuation">}</span></code></pre> <h2 id="%E5%B8%83%E5%B1%80%E7%BB%84%E4%BB%B6">布局组件</h2> <p>假设你的主题 <code>layouts</code> 目录如下：</p> <pre class="language-text"><code class="language-text">theme\n└── layouts\n   ├── layout.san\n   └── 404.san</code></pre> <p>然后，所有的页面将会默认使用 <code>layout.san</code> 作为布局组件，对于那些匹配不到的路由将会使用 <code>404.vue</code>。</p> </div></div> '},54:function(n,a,e){var s=e(1),t=e(42),o=e(17).default;n.exports=e(17),n.exports.default=s(o,t,[])}});